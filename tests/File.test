<?php

// $Id$

/**
 * @file
 * 
 * Unit Tests.
 */

/**
 * Unit Tests for the FormControl class.
 */
class PHPLib_File_TestCase extends DrupalUnitTestCase {

  protected $data_path;

  /**
   * Get Test info.
   * 
   * @return array
   *   Properties that are displayed in the test selection form.
   */
  public static function getInfo() {
    return array(
      'name' => 'File Unit Tests.',
      'description' => 'Unit tests for File.inc.',
      'group' => 'PHP Lib',
    );
  }

  /**
   * setUp() performs any pre-requisite tasks that need to happen. 
   */
  public function setUp() {
    // Enable any modules required for the test.
    parent::setUp('php_lib');
    module_load_include('inc', 'php_lib', 'File');
    $this->data_path = drupal_get_path('module', 'php_lib') . '/tests/data/file';
  }

  /**
   * Test constructing the Form definition.
   */
  public function test_fpeeks() {
    $handle = fopen("{$this->data_path}/peek.txt", 'r');
    /**
     * File pointer shouldn't move when starting from the begining.
     */
    $line_check = "1st line\n";
    $line = fpeeks($handle);
    $this->assertEqual(ftell($handle), 0, 'fpeek didnt move the file pointer from start.');
    $this->assertEqual($line, $line_check, 'fpeek returned the correct value for the first line.');
    $line_one_len = strlen($line_check);
    $line = fpeeks($handle, 1);
    $this->assertEqual($line, '', 'fpeek read 0 bytes.');
    $successful = TRUE;
    for ($i = 1; $i <= $line_one_len; $i++) {
      $line = fpeeks($handle, $i + 1);
      if ($line != substr($line_check, 0, $i)) {
        $successful = FALSE;
        break;
      }
    }
    $this->assert($successful, 'fpeek read the correct value, when the length parameter was provided.');
    $line_check = "2nd line\n";
    fgets($handle); // Reads in the first line.
    $pos = ftell($handle);
    $line = fpeeks($handle);
    $this->assertEqual(ftell($handle), $pos, 'fpeek didnt move the file pointer from middle.');
    $this->assertEqual($line, $line_check, 'fpeek returned the correct value for the second line.');
    fseek($handle, -1, SEEK_END);
    $pos = ftell($handle);
    $line = fpeeks($handle);
    $this->assertEqual(ftell($handle), $pos, 'fpeek didnt move the file pointer to the eof.');
    fseek($handle, 0, SEEK_END);
    $pos = ftell($handle);
    $line = fpeeks($handle);
    $this->assertEqual(ftell($handle), $pos, 'fpeek didnt move the file pointer passed the eof.');
  }

}