<?php

/**
 * @file
 *
 * Unit Tests.
 */

/**
 * Unit Tests for the FormControl class.
 */
class PHPLib_DelimitedFile_TestCase extends DrupalUnitTestCase {

  protected $filename;

  /**
   * Get Test info.
   *
   * @return array
   *   Properties that are displayed in the test selection form.
   */
  public static function getInfo() {
    return array(
      'name' => 'File Unit Tests.',
      'description' => 'Unit tests for class DelimitedFile.',
      'group' => 'PHP Lib',
    );
  }

  public function setUp() {
    parent::setUp('php_lib');
    module_load_include('inc', 'php_lib', 'File');
    $this->filename = file_create_filename("temp", file_directory_temp());
  }

  public function tearDown() {
    parent::tearDown();
    unlink($this->filename);
  }

  private function writeToFile($content) {
    $handle = fopen($this->filename, 'w');
    fwrite($handle, $content);
    fclose($handle);
  }

  /**
   * DelimitedFile::isDelimiter().
   */
  public function test_isDelimiter() {
    $delimiters = array('|', "\r\n");
    $this->writeToFile("a|b\nc\r\nd");
    $values = array(FALSE, TRUE, FALSE, FALSE, FALSE, TRUE, TRUE, FALSE, TRUE); // Includes EOF delimiter
    $file = new DelimitedFile($this->filename, 'r', FALSE, NULL, $delimiters);
    $successful = TRUE;
    foreach ($values as $value) {
      if ($file->isDelimiter() !== $value) {
        $successful = FALSE;
        $this->assert($successful, t('DelimitedFile::isDelimiter() incorrectly identified "%char"', array('%char' => $file->peekc())));
        break;
      }
      $file->seek(1, SEEK_CUR);
    }
    $this->assert($successful, "DelimitedFile::isDelimiter() Correctly identified all delimiters.");
    unset($file); // Destroy the reference to the file.
  }

  public function test_getfield() {
    $delimiters = array('|', ',', "\r\n");
    $this->writeToFile("field one|field\ntwo\r\nfield three,field four");
    $values = array('field one', "field\ntwo", 'field three', 'field four');
    $file = new DelimitedFile($this->filename, 'r', FALSE, NULL, $delimiters);
    $successful = TRUE;
    foreach ($values as $value) {
      if (strcmp($file->getField(), $value)) {
        $successful = FALSE;
        $this->assert($successful, t('DelimitedFile::getField() failed to get field "%field"', array('%field' => $value)));
        break;
      }
      $file->seek(1, SEEK_CUR);
    }
    $this->assert($successful, "DelimitedFile::getField() Correctly identified all fields.");
    unset($file); // Destroy the reference to the file.
  }

}